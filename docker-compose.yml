services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: jira
      POSTGRES_USER: nika
      POSTGRES_PASSWORD: 1234
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nika -d jira"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      target: base
    container_name: backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_NAME: jira
      DB_USER: nika
      DB_PASSWORD: 1234
      DB_HOST: db
      DB_PORT: 5432
      DJANGO_SECRET_KEY: 'django-insecure-!wxs1%tcz682o!22sq&4rltb@6uluy5l_qo-1f&n^xp'
      DJANGO_DEBUG: 'True'
    command: >
      sh -c "python manage.py migrate && uvicorn jira.asgi:application --host 0.0.0.0 --port 8000 --reload"

  tests:
    build:
      context: backend
      target: tests
    container_name: tests
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - db
    environment:
      DB_NAME: jira
      DB_USER: nika
      DB_PASSWORD: 1234
      DB_HOST: db
      DB_PORT: 5432
      DJANGO_SECRET_KEY: 'django-insecure-!wxs1%tcz682o!22sq&4rltb@6uluy5l_qo-1f&n^xp'
      DJANGO_DEBUG: 'True'
    command: >
      sh -c "python manage.py migrate && pytest"

  cron:
    build:
      context: backend
      dockerfile: Dockerfile
      target: cron
    container_name: cron
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_NAME: jira
      DB_USER: nika
      DB_PASSWORD: 1234
      DB_HOST: db
      DB_PORT: 5432
      DJANGO_SECRET_KEY: 'django-insecure-!wxs1%tcz682o!22sq&4rltb@6uluy5l_qo-1f&n^xp'
      DJANGO_DEBUG: 'True'
    healthcheck:
      test: ["CMD-SHELL", "pgrep cron || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true
    networks:
      - default
    command: npm start


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend


volumes:
  postgres_data:
