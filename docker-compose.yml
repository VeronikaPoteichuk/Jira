
services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-docker_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./backend:/app
    ports:
      - "8001:8000"
    depends_on:
      - pip-compile-django
      - db
    environment:
      DB_NAME: ${DB_NAME:-docker_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_HOST: ${DB_HOST_DC:-db}
      DB_PORT: ${DB_PORT:-5432}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
    command:
      - sh
      - -c
      - "python manage.py migrate && python manage.py runserver"

  tests:
    build:
      context: backend
      target: tests
    volumes:
      - ./backend:/app
    depends_on:
      - pip-compile-django
      - backend
      - db
    environment:
      DB_NAME: ${DB_NAME:-docker_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_HOST: ${DB_HOST_DC:-db}
      DB_PORT: ${DB_PORT:-5432}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
    command:
      - sh
      - -c
      - "python manage.py migrate && pytest"

  pip-compile-django:
    build:
      context: backend
      target: tests
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      sh -c "
        uv pip compile pyproject.toml --extra dev -o requirements.txt
        uv pip compile pyproject.toml --extra test -o requirements_tests.txt
      "

volumes:
  postgres_data:
